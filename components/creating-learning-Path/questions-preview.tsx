import React from "react";
import {Button} from "../ui/button";
import {X} from "lucide-react";
import Loader from "../shared/loader";
// import QuestionModal from "../components/QuestionModal";

interface QuestionPreviewProps {
  questions: any[];
  displayQuestionType: (
    type: "multiple" | "short"
  ) => "Multiple Choice" | "Short Answer";
  removeQuestion: (id: string) => void;
  isLoading: boolean;
}

export default function QuestionPreview({
  questions,
  displayQuestionType,
  removeQuestion,
  isLoading,
}: QuestionPreviewProps) {
  console.log(questions, "questiosn");
  return (
    <div>
      {isLoading ? (
        <div className="flex flex-row justify-center item-center">
          <Loader />
        </div>
      ) : (
        <div className="space-y-4 max-h-[40vh] overflow-auto">
          {questions.length === 0 ? (
            <div className="bg-[#222222] rounded-lg p-5 text-center">
              <p className="text-gray-400">
                No questions added yet, will be generated by AI.
              </p>
            </div>
          ) : (
            questions.map((q: any, index) => (
              <div
                key={q.id}
                className="bg-[#222222] rounded-lg p-5 space-y-4 relative"
              >
                <Button
                  variant="ghost"
                  size="icon"
                  className="absolute top-2 right-2 text-gray-400 hover:text-white hover:bg-transparent"
                  onClick={() => removeQuestion(q.id)}
                >
                  <X size={16} />
                </Button>
                <div>
                  <h4 className="font-medium mb-2">Question {index + 1}:</h4>
                  <p className="mb-1">{q.question}</p>
                  {q.type === "multiple" && q.options && (
                    <div className="mt-2 space-y-2">
                      {q.options.map((option: any, i: number) => (
                        <div key={i} className="flex items-center gap-2">
                          <div className="w-4 h-4 rounded-full border border-gray-400"></div>
                          <span>{option}</span>
                        </div>
                      ))}
                    </div>
                  )}
                </div>

                <div>
                  <p className="font-bold">
                    Answer: <span className="font-normal">{q.answer}</span>
                  </p>
                </div>
                <div>
                  <p className="font-bold">
                    Source:{" "}
                    <span className="font-normal text-[#F9DB6F]">
                      {q?.source}
                    </span>
                  </p>
                </div>
                <div>
                  <p className="font-bold">
                    Type:{" "}
                    <span className="font-normal">
                      {displayQuestionType(q.type)}
                    </span>
                  </p>
                </div>
              </div>
            ))
          )}
        </div>
      )}
    </div>
  );
}
