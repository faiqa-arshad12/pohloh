import jsPDF from "jspdf"
import autoTable from "jspdf-autotable"

interface PDFExportOptions {
  title: string
  filename?: string
  data: any[] | Record<string, any>
  columns?: string[] // For table data - specify which fields to include
  headers?: Record<string, string> // Custom headers for columns
  type?: "table" | "details" // table for array data, details for single object
}

export const exportToPDF = (options: PDFExportOptions) => {
  const {
    title,
    filename = title.toLowerCase().replace(/\s+/g, "-"),
    data,
    columns,
    headers = {},
    type = Array.isArray(data) ? "table" : "details",
  } = options

  const doc = new jsPDF("p", "mm", "a4")
  const pageWidth = doc.internal.pageSize.getWidth()
  const pageHeight = doc.internal.pageSize.getHeight()
  const margin = 15

  // Set page background
  doc.setFillColor(25, 25, 25) // #191919
  doc.rect(0, 0, pageWidth, pageHeight, "F")

  // Header
  const addHeader = () => {
    doc.setFont("helvetica", "bold")
    doc.setFontSize(22)
    doc.setTextColor(255, 255, 255)
    doc.text("Pohloh", margin, 18)

    doc.setFont("helvetica", "normal")
    doc.setFontSize(14)
    doc.setTextColor(220, 220, 220)
    const titleWidth = doc.getTextWidth(title)
    doc.text(title, pageWidth - margin - titleWidth, 18)
  }

  // Footer
  const addFooter = () => {
    const pageCount = (doc as any).internal.getNumberOfPages()
    const reportGeneratedText = `${new Date().toLocaleDateString(
      "en-US"
    )}`
    const reportGeneratedTextWidth = doc.getTextWidth(reportGeneratedText)
    doc.setFontSize(9)
    doc.setTextColor(200, 200, 200)
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i)
      doc.setDrawColor(100, 100, 100)
      doc.line(margin, pageHeight - 18, pageWidth - margin, pageHeight - 18)
      doc.text(`Generated by Pohloh`, margin, pageHeight - 12)
      doc.text(
        reportGeneratedText,
        (pageWidth - reportGeneratedTextWidth) / 2,
        pageHeight - 12
      )
      const pageText = `Page ${i} of ${pageCount}`
      doc.text(
        pageText,
        pageWidth - margin - doc.getTextWidth(pageText),
        pageHeight - 12
      )
    }
  }

  addHeader()
  doc.setFontSize(10)
  doc.setTextColor(100, 100, 100)

  const commonAutoTableOptions = {
    startY: 40,
    theme: "grid" as const,
    headStyles: {
      fillColor: [249, 219, 111] as [number, number, number],
      textColor: [0, 0, 0] as [number, number, number],
      fontStyle: "bold" as const,
      fontSize: 10,
    },
    bodyStyles: {
      fillColor: [25, 25, 25] as [number, number, number],

      textColor: [255, 255, 255] as [number, number, number],
      fontSize: 8,
    },
    styles: {
      overflow: "linebreak" as const,
      cellPadding: 3,
      lineColor: [100, 100, 100] as [number, number, number],
    },
  }

  if (type === "table" && Array.isArray(data)) {
    if (data.length === 0) return

    const tableColumns = columns || Object.keys(data[0])
    const tableHeaders = tableColumns.map((col) => headers[col] || col.charAt(0).toUpperCase() + col.slice(1))
    const tableData = data.map((item) =>
      tableColumns.map((col) => {
        const value = item[col]
        if (Array.isArray(value)) return value.join(", ")
        return value?.toString() || "N/A"
      })
    )

    autoTable(doc, {
      ...commonAutoTableOptions,
      head: [tableHeaders],
      body: tableData,
    })
  } else {
    const itemData = Array.isArray(data) ? data[0] : data

    const detailsData = Object.entries(itemData).map(([key, value]) => {
      const label = headers[key] || key.charAt(0).toUpperCase() + key.slice(1)
      let displayValue = "N/A"

      if (value !== null && value !== undefined) {
        displayValue = Array.isArray(value) ? value.join(", ") : value.toString()
      }

      return [label, displayValue]
    })

    autoTable(doc, {
      ...commonAutoTableOptions,
      head: [["Field", "Value"]],
      body: detailsData,
      columnStyles: {
        0: { fontStyle: "bold" as const, cellWidth: 50 },
        1: { cellWidth: 120 },
      },
    })
  }

  addFooter()
  doc.save(`${filename}-${new Date().toISOString().split("T")[0]}.pdf`)
}
